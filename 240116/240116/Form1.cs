using System;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Media;
using System.Windows.Forms;

namespace _240116
{
    public partial class Form1 : Form
    {
        Timer
            timer = new Timer();
        Image
            orangePortal = Properties.Resources.OrangePortal,
            bluePortal = Properties.Resources.BluePortal,
            theSaw = Properties.Resources.saw,
            gameOverDoor = Properties.Resources.door,
            theKey = Properties.Resources.key,
            iWays = Properties.Resources.ways;
        Pen
            heroLine = new Pen(Brushes.LimeGreen, 2);
        SolidBrush
            secondaryBlockBrush = new SolidBrush(Color.FromArgb(6, 96, 153)),
            primaryBlockBrush = new SolidBrush(Color.FromArgb(0, 68, 111)),
            fakeBlockBrush = new SolidBrush(Color.FromArgb(0, 53, 106)),
            heroEyesBrush = new SolidBrush(Color.LimeGreen);
        LinearGradientBrush
            backGroundBrush = new LinearGradientBrush(new Rectangle(0, 0, 1920, 1080), Color.SteelBlue, Color.Indigo, System.Drawing.Drawing2D.LinearGradientMode.Vertical);
        const int 
            BLOCK_SIZE = 25, HERO_STEP_RANGE = 5,
            LEVELS_COUNT = 3, PORTALS_AT_LEVEL = 3, SMOKE_ADDITIONAL_SPACE = 16,
            HERO_WIDTH = 9 * BLOCK_SIZE / 10,
            HERO_HEIGHT = 3 * BLOCK_SIZE - 10,
            SAW_SIZE = BLOCK_SIZE * 2;
        static readonly int[]
            HERO_INIT_X = { 65, 100, 100 },
            HERO_INIT_Y = { 950, 100, 100 },
            SAW_INIT_X = { 325, 115, 115 },
            SAW_INIT_Y = { 825, 75, 75 },
            SAW_VELOCITY_X = { 11, 0, 30 },
            SAW_VELOCITY_Y = { 0, 30, 0 },
            SAW_END_X = { 1325, 0, 0 },
            SAW_END_Y = { 800, 970, 0 },
            DOOR_X = { 40, 100, 100 },
            DOOR_Y = { 500, 100, 100 },
            KEY_X = { 990, 100, 100 },
            KEY_Y = { 735, 100, 100 },
            BOOTS_X = { 1765, 100, 100 },
            BOOTS_Y = { 990, 100, 100 },
            WAYS_X = { 1378, 100, 100 },
            WAYS_Y = { 252, 100, 100 };
        static readonly int [,]
            ORANGE_PORTAL_ORIENTATION = { 
                                            { 1, 0, 0 },
                                            { 0, 0, 0 },
                                            { 0, 0, 0 }
                                        },
            BLUE_PORTAL_ORIENTATION = { 
                                            { 0, 1, 0 },
                                            { 0, 0, 0 },
                                            { 0, 0, 0 }
                                      };
        double
            gameOverTimer = 44640d;
        float
            heroX = HERO_INIT_X[0], gameSize = 1f,
            heroY = HERO_INIT_Y[0],
            heroVelocity = 5f;
        int
            heroJumps = 0, currentMap = 0, gameDiffuculty = 1,
            sawFrames = 0, portalFrames = 0,
            sawX = SAW_INIT_X[0], sawY = SAW_INIT_Y[0],
            sawVelocityX = SAW_VELOCITY_X[0], sawVelocityY = SAW_VELOCITY_Y[0], 
            lastTick, lastFrameRate, frameRate;
        Boolean 
            is2D, soundtrack, reSizeEnabled, superBoots,
            isDownA, isDownD, isDownW,
            heroJumping, heroAtEarth,
            haveKey, debugInfo, smokeEnabled = true, initialSetting,
            paused, gameover, message;
        string
            messageStr;
        static readonly string[]
            levelNames = { "первый", "второй", "третий" };
        Rectangle[,]
            mapRects = new Rectangle[1050 / BLOCK_SIZE, 1900 / BLOCK_SIZE];
        Point[,]
            OrangePortalXY = new Point[LEVELS_COUNT, PORTALS_AT_LEVEL]
            {
                {
                    new Point { X = 1215, Y = 665 },
                    new Point { X = 490, Y = 265 },
                    new Point { X = 590, Y = 465 }
                },
                {
                    new Point { X = 390, Y = 65 },
                    new Point { X = 490, Y = 265 },
                    new Point { X = 590, Y = 465 }
                },
                {
                    new Point { X = 390, Y = 65 },
                    new Point { X = 490, Y = 265 },
                    new Point { X = 590, Y = 465 }
                }
            },
            BluePortalXY = new Point[LEVELS_COUNT, PORTALS_AT_LEVEL]
            {
                {
                    new Point { X = 1865, Y = 940 },
                    new Point { X = 115, Y = 715 },
                    new Point { X = 790, Y = 465 }
                },
                {
                    new Point { X = 165, Y = 65 },
                    new Point { X = 690, Y = 265 },
                    new Point { X = 790, Y = 465 }
                },
                {
                    new Point { X = 165, Y = 65 },
                    new Point { X = 690, Y = 265 },
                    new Point { X = 790, Y = 465 }
                }
            };
        SoundPlayer sp;

        #region Карта
        int[,] mapSmoke = new int[1050 / BLOCK_SIZE + SMOKE_ADDITIONAL_SPACE, 1900 / BLOCK_SIZE + SMOKE_ADDITIONAL_SPACE];
        int[,,]
            map = new int[LEVELS_COUNT, 1050 / BLOCK_SIZE, 1900 / BLOCK_SIZE]
        {
            {
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,10,10,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,12,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,1,1,1,1,1,1,1,11,0,0,0,0,0,0,1,0,0,0,0,0,0,1},
                    {1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,1,0,0,0,0,0,1,11,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,1,0,0,0,0,0,1,11,0,0,0,0,0,0,0,0,0,0,0,1,2,1},
                    {1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,1,0,0,0,0,0,1,11,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,1,1,1,1,1,1,1,11,0,0,0,0,0,0,1,0,0,0,0,0,0,1},
                    {1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,12,12,12,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,12,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1},
                    {1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1},
                    {1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,1,0,0,0,0,1,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1},
                    {1,1,0,1,0,0,0,0,1,0,1,1,11,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,12,0,1,0,0,0,0,1,0,0,1,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,1,0,0,0,0,1,0,0,1,11,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,10,10,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,1,0,0,0,0,1,0,0,1,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,1,0,0,0,0,1,0,0,1,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,1,90,90,90,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,1,0,0,0,0,1,0,0,1,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,10,10,10,10,10,10,10,10,10,10,10,10,1},
                    {1,0,0,1,61,61,61,0,1,10,10,1,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,13,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,0,1,1,1,1,1,1,1,1,1,1,10,10,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1},
                    {1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,1,1,0,1,0,0,0,0,0,1,1,0,1,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,60,1},
                    {1,1,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,60,1},
                    {1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,40,0,0,0,60,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
                    },
                    {
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,0,0,0,0,0,6,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,6,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,6,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,1,1,1,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,1,1,1,1,1,0,1,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,8,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,8,0,0,0,0,1,0,0,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,8,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,8,0,0,0,0,1,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,6,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,6,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,6,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,1,1,1,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,1,1,1,1,1,0,1,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,8,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,8,0,0,0,0,1,0,0,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,8,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,8,0,0,0,0,1,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
                    },{
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,0,0,0,0,0,6,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,6,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,6,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,1,1,1,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,1,1,1,1,1,0,1,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,8,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,8,0,0,0,0,1,0,0,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,8,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,8,0,0,0,0,1,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,6,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,6,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,6,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,1,1,1,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,1,1,1,1,1,0,1,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,8,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,8,0,0,0,0,1,0,0,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,8,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,8,0,0,0,0,1,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
                    }
        };
        #endregion

        private int CalculateFrameRate()
        {
            if (System.Environment.TickCount - lastTick >= 1000)
            {
                lastFrameRate = frameRate;
                frameRate = 0;
                lastTick = System.Environment.TickCount;
            }
            frameRate++;
            return lastFrameRate;
        }

        public Form1()
        {
            InitializeComponent();
            sp = new SoundPlayer(Properties.Resources.SoundTheme);
            sp.Load();
            if (soundtrack)
                sp.Play();
            message = true;
            messageStr = "              Управление:\n\n  A, D - передвижение\n  W - прыжок\n  Z - вкл/выкл музыку\n  Space - переключить графику.";
            mapBuild();
            this.Size = new Size(1920, 1080);
            this.Paint += new PaintEventHandler(Program_Paint);
            this.KeyDown += new KeyEventHandler(Program_KeyDown);
            this.KeyUp += new KeyEventHandler(Program_KeyUp);
            this.MouseClick += new MouseEventHandler(Program_MouseMove);
            timer.Interval = 1;
            timer.Tick += new EventHandler(timer_Tick);
            timer.Start();
            //Cursor.Hide();
        }

        void Program_MouseMove(object senser, MouseEventArgs e)
        {
            Point click = new Point((int)(e.X / gameSize), e.Y);
            Rectangle acceptKeyRect = new Rectangle(906, 616, 104, 54);
            if (acceptKeyRect.Contains(click) && e.Button == MouseButtons.Left)
                message = false;
            acceptKeyRect = new Rectangle(855, 415, 24, 24);
            if (acceptKeyRect.Contains(click) && e.Button == MouseButtons.Left)
                if (smokeEnabled)
                {
                    for (int q = 0; q < 1025 / BLOCK_SIZE + SMOKE_ADDITIONAL_SPACE; q++)
                        for (int w = 0; w < 1875 / BLOCK_SIZE + SMOKE_ADDITIONAL_SPACE; w++)
                            mapSmoke[q, w] = 0;
                    smokeEnabled = false;
                }
                else
                {
                    mapBuild();
                    smokeEnabled = true;
                }
            acceptKeyRect = new Rectangle(1025, 427, 120, 28);
            if (acceptKeyRect.Contains(click) && e.Button == MouseButtons.Left)
                if (gameDiffuculty == 0)
                    gameDiffuculty = 1;
                else
                    gameDiffuculty = 0;
            double tX = e.X * gameSize / 10, tY = e.Y / 10;
            tX = (Math.Floor(tX) - 0.5d) * 10 / gameSize;
            tY = (Math.Floor(tY) - 0.5d) * 10;
            Rectangle gameRect = new Rectangle(BLOCK_SIZE + 16, BLOCK_SIZE * 2 + 16, 1900 - HERO_WIDTH - BLOCK_SIZE - 26, 1000 - HERO_HEIGHT - BLOCK_SIZE * 2 - 16);
            if (e.Button == MouseButtons.Right && gameRect.Contains(click))
            {
                heroX = (float)tX;
                heroY = (float)tY;
            }
        }

        void Program_KeyDown(object sender, KeyEventArgs e)
        {
            switch (e.KeyData)
            {
                case Keys.W:
                    isDownW = true;
                    break;
                case Keys.A:
                    isDownA = true;
                    isDownD = false;
                    break;
                case Keys.D:
                    isDownD = true;
                    isDownA = false;
                    break;
                case Keys.Escape:
                    Application.Exit();
                    break;
            }
        }

        void Program_KeyUp(object sender, KeyEventArgs e)
        {
            switch (e.KeyData)
            {
                case Keys.W:
                    isDownW = false;
                    break;
                case Keys.A:
                    isDownA = false;
                    break;
                case Keys.D:
                    isDownD = false;
                    break;
                case Keys.C:
                    if (reSizeEnabled)
                        reSizeEnabled = false;
                    else 
                        reSizeEnabled = true;
                    break;
                case Keys.B:
                    if (debugInfo)
                        debugInfo = false;
                    else
                        debugInfo = true;
                    break;
                case Keys.D1:
                    if (gameSize > 0.5)
                        gameSize -= 0.1f;
                    break;
                case Keys.D2:
                    if (gameSize < 1) 
                        gameSize += 0.1f;
                    break;
                case Keys.Z:
                    if (sp.IsLoadCompleted)
                        if (!soundtrack)
                        {
                            soundtrack = true;
                            sp.Play();
                        }
                        else
                        {
                            soundtrack = false;
                            sp.Stop();
                            sp.Dispose();
                        }
                    break;
                case Keys.X:
                    if (paused && !gameover)
                        paused = false;
                    else
                        paused = true;
                    break;
                case Keys.Enter:
                    message = false;
                    break;
                case Keys.Space:
                    if (is2D)
                        is2D = false;
                    else is2D = true;
                    break;
            }
        }

        private bool heroCanFall()
        {
            int newY, newX, newX2, map1, map2;
            newY = (int)((heroY - (is2D ? 12 : 9) + (heroVelocity > 0 ? HERO_HEIGHT : -11)) / BLOCK_SIZE);
            newX = (int)((heroX - 15) / BLOCK_SIZE);
            newX2 = (int)((heroX + HERO_WIDTH - 15) / BLOCK_SIZE);
            map1 = map[currentMap, newY, newX];
            map2 = map[currentMap, newY, newX2];
            if (map1 == 2 && heroVelocity > 0)
                map[currentMap, newY, newX] = 0; 
            if (map2 == 2 && heroVelocity > 0)
                map[currentMap, newY, newX2] = 0;
            if (map1 == 0 && map2 == 0)
                return true;
            if (
                (map1 >= 10 && map1 <= 13) ||
                (map2 >= 10 && map2 <= 13)  )
            {
                heroReset();
                return false;
            }
            if (
                (map1 >= 60 && map1 <= 69) ||
                (map2 >= 60 && map2 <= 69)  )
                    PortalTeleportation(newY, newX);
            if (map1 == 40 || map2 == 40)
                return takeSuperBoots(newY, newX);
            if (map1 == 5 || map2 == 5)
                return takeKeyAndCanPath(newY, newX);
            return false;
        }

        private bool heroCanStepForward()
        {
            int newY, newX;
            Rectangle HR = new Rectangle((int)heroX + HERO_WIDTH - 12, (int)heroY, HERO_WIDTH, HERO_HEIGHT);
            for (int a = 0; a < HERO_HEIGHT; a += BLOCK_SIZE)
            {
                newY = (int)((heroY + a) / BLOCK_SIZE);
                newX = (int)((heroX + HERO_WIDTH - 12) / BLOCK_SIZE);
                if (HR.IntersectsWith(mapRects[newY, newX]))
                    return false;
                if (map[currentMap, newY, newX] >= 60 && map[currentMap, newY, newX] <= 69)
                        PortalTeleportation(newY, newX);
                if (map[currentMap, newY, newX] >= 10 && map[currentMap, newY, newX] <= 13)
                {
                    heroReset();
                    return false;
                }
                if (map[currentMap, newY, newX] == 40)
                    return takeSuperBoots(newY, newX);
            }
            return true;
        }

        private void PortalTeleportation(int newY, int newX)
        {
            heroX += (OrangePortalXY[currentMap, map[currentMap, newY, newX] - 60].X - BluePortalXY[currentMap, map[currentMap, newY, newX] - 60].X + BLOCK_SIZE);
            heroY += (OrangePortalXY[currentMap, map[currentMap, newY, newX] - 60].Y - BluePortalXY[currentMap, map[currentMap, newY, newX] - 60].Y + BLOCK_SIZE);
        }

        private bool heroCanStepBack()
        {
            int newY, newX;
            Rectangle HR = new Rectangle((int)heroX - 18, (int)heroY, HERO_WIDTH, HERO_HEIGHT);
            for (int a = 0; a < HERO_HEIGHT; a += BLOCK_SIZE)
            {
                newY = (int)((heroY + a) / BLOCK_SIZE);
                newX = (int)((heroX - 18) / BLOCK_SIZE);

                if (HR.IntersectsWith(mapRects[newY, newX]))
                    return false;

                switch(map[currentMap, newY, newX])
                {
                    case 90: case 91: case 92:
                        return false;
                    case 10: case 11: case 12: case 13:
                        heroReset();
                        return false;
                    case 8:
                        if (haveKey)
                            if (currentMap < LEVELS_COUNT - 1)
                            {
                                messageStr = "Вы прошли " + levelNames[currentMap] + " уровень.";
                                currentMap++;
                                heroReset();
                                sawVelocityX = SAW_VELOCITY_X[currentMap];
                                sawVelocityY = SAW_VELOCITY_Y[currentMap];
                                mapBuild();
                                message = true;
                                haveKey = false;
                            }
                            else
                            {
                                paused = true;
                                gameover = true;
                                return true;
                            }
                        else
                            return false;
                        break;
                    case 40:
                        takeSuperBoots(newY, newX);
                        break;
                    case 5:
                        return takeKeyAndCanPath(newY, newX);
                }
            }
            return true;
        }

        private bool takeSuperBoots(int newY, int newX)
        {
            if (!superBoots)
            {
                superBoots = true;
                map[currentMap, newY, newX] = 0;
            }
            return true;
        }

        private bool takeKeyAndCanPath(int newY, int newX)
        {
            haveKey = true;
            map[currentMap, newY, newX] = 0;
            return true;
        }

        private void mapBuild()
        {
            for (int q = 1025 / BLOCK_SIZE; q >= 0; q--)
                for (int w = 1875 / BLOCK_SIZE; w >= 0; w--)
                    if (map[currentMap, q, w] == 1 || map[currentMap, q, w] == 2)
                        mapRects[q, w] = new Rectangle(15 + w * BLOCK_SIZE, 15 + q * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
            for (int q = 0; q < 1025 / BLOCK_SIZE + SMOKE_ADDITIONAL_SPACE; q++)
                for (int w = 0; w < 1875 / BLOCK_SIZE + SMOKE_ADDITIONAL_SPACE; w++)
                    mapSmoke[q, w] = 1;
        }

        private bool heroCloseToSaw()
        {
            double newY, newX, dist;
            for (int a = 0; a < HERO_HEIGHT; a += BLOCK_SIZE)
            {
                newY = heroY + a;
                newX = heroX + HERO_WIDTH;
                dist = Math.Sqrt(Math.Pow(sawX + SAW_SIZE / 2 - newX, 2) + Math.Pow(sawY + SAW_SIZE / 2 - newY, 2));
                if (dist <= SAW_SIZE / 2)
                    return true;
                newX = heroX - 10;
                dist = Math.Sqrt(Math.Pow(sawX + SAW_SIZE / 2 - newX, 2) + Math.Pow(sawY + SAW_SIZE / 2 - newY, 2));
                if (dist <= SAW_SIZE / 2)
                    return true;
            }
            return false;
        }

        void timer_Tick(object sender, EventArgs e)
        {
            if (!paused && !message)
            {
                if (smokeEnabled)
                {
                    for (int q = -6; q < SMOKE_ADDITIONAL_SPACE / 2; ++q)
                        for (int w = -SMOKE_ADDITIONAL_SPACE / 2; w < SMOKE_ADDITIONAL_SPACE / 2; ++w)
                        {
                            int qwetemp = mapSmoke[((int)heroY - 15 + q * BLOCK_SIZE) / BLOCK_SIZE + SMOKE_ADDITIONAL_SPACE / 2, ((int)heroX - 15 + w * BLOCK_SIZE) / BLOCK_SIZE + SMOKE_ADDITIONAL_SPACE / 2];
                            if (qwetemp == 1)
                                mapSmoke[((int)heroY - 15 + q * BLOCK_SIZE) / BLOCK_SIZE + SMOKE_ADDITIONAL_SPACE / 2, ((int)heroX - 15 + w * BLOCK_SIZE) / BLOCK_SIZE + SMOKE_ADDITIONAL_SPACE / 2] = 0;
                        }
                }
                if (heroCloseToSaw())
                {
                    heroReset();
                }
                if (sawVelocityY != 0)
                {
                    if (sawY > SAW_END_Y[currentMap] - SAW_SIZE)
                        sawVelocityY = -Math.Abs(sawVelocityY);
                    else
                        if (sawY < SAW_INIT_Y[currentMap] + SAW_SIZE - 10)
                            sawVelocityY = Math.Abs(sawVelocityY);
                    sawY += sawVelocityY;
                }
                if (sawVelocityX != 0)
                {
                    if (sawX > SAW_END_X[currentMap] - SAW_SIZE)
                        sawVelocityX = -Math.Abs(sawVelocityX);
                    else
                        if (sawX < SAW_INIT_X[currentMap])
                            sawVelocityX = Math.Abs(sawVelocityX);
                    sawX += sawVelocityX;
                }

                if (sawFrames < 4)
                    sawFrames++;
                else
                    sawFrames = 0;

                if (portalFrames < 19)
                    portalFrames++;
                else
                    portalFrames = 0;

                if (isDownW && !heroJumping && heroAtEarth)
                {
                    heroJumping = true;
                    heroVelocity = - Math.Abs(heroVelocity);
                }

                if (heroCanFall())
                {
                    heroY += heroVelocity;
                    heroAtEarth = false;
                }
                else
                {
                    if (heroVelocity < 0)
                        heroVelocity = -heroVelocity;
                    heroAtEarth = true;
                }
                
                if (heroJumping)
                    if (heroJumps < 12 + (gameDiffuculty == 0 ? 1 : 0) + (superBoots ? 24 : 0))
                    {
                        heroJumps++;
                        heroAtEarth = false;
                    }
                    else
                        if (heroJumps < 18 + (superBoots ? 20 : 0))
                        {
                            heroJumps++;
                            heroAtEarth = false;
                            heroVelocity = Math.Abs(heroVelocity);
                        }
                        else
                        {
                            heroJumps = 0;
                            heroJumping = false;
                        }

                if (isDownA && heroCanStepBack())
                    heroX -= HERO_STEP_RANGE;

                if (isDownD && heroCanStepForward())
                    heroX += HERO_STEP_RANGE;
            }

            heroLine = new Pen(is2D ? new SolidBrush(Color.ForestGreen) : Brushes.LimeGreen, 2);
            heroEyesBrush = new SolidBrush(is2D ? Color.ForestGreen : Color.LimeGreen);
            primaryBlockBrush = new SolidBrush(Color.FromArgb(is2D ? 165 : 0, is2D ? 165 : 68, is2D ? 165 : 111));
            fakeBlockBrush = new SolidBrush(Color.FromArgb(is2D ? 159 : 0, is2D ? 159 : 53, is2D ? 159 : 106));
            backGroundBrush = new LinearGradientBrush(ClientRectangle, is2D ? Color.LightSlateGray : Color.SteelBlue, is2D ? Color.Linen : Color.Indigo,
                System.Drawing.Drawing2D.LinearGradientMode.Vertical);

            if (gameover)
                gameOverTimer--;
            Invalidate();
        }

        private void heroReset()
        {
            heroX = HERO_INIT_X[currentMap];
            heroY = HERO_INIT_Y[currentMap];
            superBoots = false;
            map[currentMap, (BOOTS_Y[currentMap] - 40) / BLOCK_SIZE, (BOOTS_X[currentMap] - 15) / BLOCK_SIZE] = 40;
        }

        public void drawCube(int x, int y, int w, int h, int mode, Graphics g)
        {
            g.FillRectangle(mode == 1 ? primaryBlockBrush : fakeBlockBrush, x, y, w, h);
            Pen newLine = new Pen(Color.FromArgb(56, 200, 247), 1);
            if ((mode == 1 || mode == 2) && !is2D)
            {
                g.FillPolygon(secondaryBlockBrush, new Point[] { new Point { X = x - w / 4, Y = y - w / 4 }, new Point { X = x + w - 1 - w / 4, Y = y - w / 4 },
                new Point { X = x + w, Y = y }, new Point { X = x, Y = y }});
                g.FillPolygon(secondaryBlockBrush, new Point[] { new Point { X = x - w / 4, Y = y + h - 1 - w / 4 }, new Point { X = x - w / 4, Y = y - w / 4 },
                new Point { X = x, Y = y }, new Point { X = x, Y = y + h }});
                g.DrawLine(newLine, x, y, x, y + h - 1);
                g.DrawLine(newLine, x, y, x - w / 4, y - w / 4);
                g.DrawLine(newLine, x, y, x + w - 1, y);
                g.DrawLine(newLine, x + w - 1, y, x + w - 1 - w / 4, y - w / 4);
                g.DrawLine(newLine, x, y + h, x - w / 4, y + h - w / 4);
                g.DrawLine(newLine, x - w / 4, y - w / 4, x - w / 4, y + w - w / 4);
                g.DrawLine(newLine, x - w / 4, y - w / 4, x + w - 1 - w / 4, y - w / 4);
                g.DrawLine(newLine, x + w, y, x + w, y + h);
                g.DrawLine(newLine, x, y + h, x + w, y + h);
            }
        }

        public void drawTriangle(int x, int y, int penWidth, int orientation, Color innerColor, Color outterColor, Graphics g)
        {
            Point[] p = new Point[] { new Point(0,0), new Point(0,0), new Point(0,0)};
            switch (orientation)
            {
                case 0:
                    p[0] = new Point(x, y + BLOCK_SIZE);
                    p[1] = new Point(x + BLOCK_SIZE, y + BLOCK_SIZE);
                    p[2] = new Point(x + BLOCK_SIZE / 2, y);
                    break;
                case 1:
                    p[0] = new Point(x, y);
                    p[1] = new Point(x, y + BLOCK_SIZE);
                    p[2] = new Point(x - (penWidth > 0 ? penWidth : 0) + BLOCK_SIZE, y + BLOCK_SIZE / 2);
                    break;
                case 2:
                    p[0] = new Point(x, y);
                    p[1] = new Point(x + BLOCK_SIZE, y);
                    p[2] = new Point(x + BLOCK_SIZE / 2, y + BLOCK_SIZE);
                    break;
                case 3:
                    p[0] = new Point(x + BLOCK_SIZE, y);
                    p[1] = new Point(x + BLOCK_SIZE, y + BLOCK_SIZE);
                    p[2] = new Point(x + (penWidth > 0 ? penWidth : 0), y + BLOCK_SIZE / 2);
                    break;
                default:
                    goto case 0;
            }
            if (penWidth < 1)
            {
                g.FillPolygon(new SolidBrush(innerColor), p);
                g.DrawPolygon(new Pen(outterColor, Math.Abs(penWidth)), p);
            }
            else
                g.DrawPolygon(new Pen(innerColor, penWidth), p);
        }

        public void drawRectWithBorder(Rectangle Rect, Color GradientStart, Color GradientEnd, Color BorderColor, int BorderSize, Boolean gamma, Graphics g)
        {
            System.Drawing.Drawing2D.LinearGradientBrush tempbrush = new System.Drawing.Drawing2D.LinearGradientBrush((Rect.Width < 150 ? Rect : ClientRectangle),
            GradientStart, GradientEnd, System.Drawing.Drawing2D.LinearGradientMode.Vertical);
            tempbrush.GammaCorrection = gamma;
            g.FillRectangle(tempbrush, Rect);
            g.DrawRectangle(new Pen(BorderColor, BorderSize), Rect);
            int temp = BorderSize / 2;
            Rect.Inflate(-temp,-temp);
            g.DrawRectangle(Pens.Black, Rect);
            Rect.Inflate(BorderSize, BorderSize);
            g.DrawRectangle(Pens.Black, Rect);
            Rect.Inflate(-(BorderSize - temp), -(BorderSize - temp));
        }

        void Program_Paint(object sender, PaintEventArgs e)
        {
            Graphics g = e.Graphics;

            /*g.TranslateTransform(1920, 1080);
            g.RotateTransform(180f);*/
            g.FillRectangle(backGroundBrush, ClientRectangle);
            if (reSizeEnabled)
            {
                g.ScaleTransform(gameSize, 1);
            }
            for (int a = 1025 / BLOCK_SIZE; a >= 0; a--)
                for (int b = 1875 / BLOCK_SIZE; b >= 0; b--)
                    if (mapSmoke[a + SMOKE_ADDITIONAL_SPACE / 2, b + SMOKE_ADDITIONAL_SPACE / 2] == 0 || !smokeEnabled)
                    switch (map[currentMap, a, b])
                    {
                        case 1:
                        case 2:
                            drawCube(15 + b * BLOCK_SIZE, 15 + a * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE, map[currentMap, a, b], g);
                            break;
                        case 10: case 11: case 12: case 13:
                            drawTriangle(15 + b * BLOCK_SIZE, 15 + a * BLOCK_SIZE, -1, map[currentMap, a, b] - 10, Color.DimGray, Color.LightSlateGray, g);
                            break;
                    }
            if (is2D)
            {
                g.FillRectangle(primaryBlockBrush, 0, 0, 15, 1080 / gameSize);
                g.FillRectangle(primaryBlockBrush, 0, 1080 - BLOCK_SIZE - 15, 1920 / gameSize, 1080 / gameSize);
                g.FillRectangle(primaryBlockBrush, 1915, 0, 1920 / gameSize, 1080 / gameSize);
                g.FillRectangle(primaryBlockBrush, 0, 0, 1920 / gameSize, BLOCK_SIZE + 15);
            }
            if (mapSmoke[(WAYS_Y[currentMap] - 15) / BLOCK_SIZE + SMOKE_ADDITIONAL_SPACE / 2, (WAYS_X[currentMap] - 15) / BLOCK_SIZE + SMOKE_ADDITIONAL_SPACE / 2] == 0)
                g.DrawImage(iWays, WAYS_X[currentMap], WAYS_Y[currentMap], iWays.Width / 2, iWays.Height / 2);
            if (!gameover)
            {
                g.DrawRectangle(heroLine, heroX + BLOCK_SIZE / 10, heroY - 1, HERO_WIDTH - BLOCK_SIZE / 5, HERO_HEIGHT / 4);
                g.DrawRectangle(heroLine, heroX, heroY + HERO_HEIGHT / 4 + BLOCK_SIZE / 10, HERO_WIDTH, HERO_HEIGHT / 2 - BLOCK_SIZE / 5);
                g.DrawRectangle(heroLine, heroX + BLOCK_SIZE / 10, heroY + 3 * HERO_HEIGHT / 4, 3 * BLOCK_SIZE / 10, 3 * BLOCK_SIZE / 5);
                g.DrawRectangle(heroLine, heroX + BLOCK_SIZE / 2 + 1, heroY + 3 * HERO_HEIGHT / 4, 3 * BLOCK_SIZE / 10, 3 * BLOCK_SIZE / 5);
                if (superBoots)
                {
                    g.FillRectangle(new SolidBrush(Color.FromArgb(200, 50, 50)), heroX - 1, heroY + 3 * HERO_HEIGHT / 4 + (is2D ? 12 : 10), (is2D ? 12 : 11), BLOCK_SIZE / 4);
                    g.FillRectangle(new SolidBrush(Color.FromArgb(200, 50, 50)), heroX + HERO_WIDTH - 10, heroY + 3 * HERO_HEIGHT / 4 + (is2D ? 12 : 10), (is2D ? 12 : 11), BLOCK_SIZE / 4);
                }
                g.FillRectangle(heroEyesBrush, heroX + BLOCK_SIZE / 10 + 4, heroY + 3, 2, 2);
                g.FillRectangle(heroEyesBrush, heroX + BLOCK_SIZE / 10 + 11, heroY + 3, 2, 2);
                heroLine.Width--;
                g.DrawLine(heroLine, heroX + BLOCK_SIZE / 10 + 4, heroY + 9, heroX + BLOCK_SIZE / 10 + 12, heroY + 9);
                g.DrawLine(heroLine, heroX + BLOCK_SIZE / 10 + 5, heroY + 10, heroX + BLOCK_SIZE / 10 + 11, heroY + 10);
            }

            for (int a = 0; a < PORTALS_AT_LEVEL; ++a)
            {
                Rectangle BP = new Rectangle(BluePortalXY[currentMap, a].X, BluePortalXY[currentMap, a].Y, BLOCK_SIZE * (BLUE_PORTAL_ORIENTATION[currentMap, a] == 1 ? 3 : 1), BLOCK_SIZE / 5 * (BLUE_PORTAL_ORIENTATION[currentMap, a] == 1 ? 4 : 15));
                if (mapSmoke[(BluePortalXY[currentMap, a].Y - 15) / BLOCK_SIZE + SMOKE_ADDITIONAL_SPACE / 2, (BluePortalXY[currentMap, a].X - 15) / BLOCK_SIZE + SMOKE_ADDITIONAL_SPACE / 2] == 0)
                    g.DrawImage(bluePortal, BP, new Rectangle(50 * portalFrames, 0, 50, 50), GraphicsUnit.Pixel);
                BP = new Rectangle(OrangePortalXY[currentMap, a].X, OrangePortalXY[currentMap, a].Y, BLOCK_SIZE * (ORANGE_PORTAL_ORIENTATION[currentMap, a] == 1 ? 3 : 1), BLOCK_SIZE / 5 * (ORANGE_PORTAL_ORIENTATION[currentMap, a] == 1 ? 4 : 15));
                if (mapSmoke[(OrangePortalXY[currentMap, a].Y - 15) / BLOCK_SIZE + SMOKE_ADDITIONAL_SPACE / 2, (OrangePortalXY[currentMap, a].X - 15) / BLOCK_SIZE + SMOKE_ADDITIONAL_SPACE / 2] == 0)
                    g.DrawImage(orangePortal, BP, new Rectangle(50 * portalFrames, 0, 50, 50), GraphicsUnit.Pixel);
            }
            if (mapSmoke[(DOOR_Y[currentMap] - 15) / BLOCK_SIZE + SMOKE_ADDITIONAL_SPACE / 2, (DOOR_X[currentMap] - 15) / BLOCK_SIZE + SMOKE_ADDITIONAL_SPACE / 2] == 0)
                g.DrawImage(gameOverDoor, DOOR_X[currentMap] + (is2D ? 0 : 1), DOOR_Y[currentMap], BLOCK_SIZE, HERO_HEIGHT);
            if (mapSmoke[(sawY - 15) / BLOCK_SIZE + SMOKE_ADDITIONAL_SPACE / 2, (sawX - 15) / BLOCK_SIZE + SMOKE_ADDITIONAL_SPACE / 2] == 0)
            {
                Rectangle sawRect = new Rectangle(sawX, sawY, SAW_SIZE, SAW_SIZE);
                g.DrawImage(theSaw, sawRect, new Rectangle(300 * sawFrames, 0, 300, 300), GraphicsUnit.Pixel);
            }
            if (!haveKey && mapSmoke[(KEY_Y[currentMap] - 15) / BLOCK_SIZE + SMOKE_ADDITIONAL_SPACE / 2, (KEY_X[currentMap] - 15) / BLOCK_SIZE + SMOKE_ADDITIONAL_SPACE / 2] == 0)
                g.DrawImage(theKey, KEY_X[currentMap], KEY_Y[currentMap], BLOCK_SIZE, BLOCK_SIZE * 2);
            if (!superBoots && mapSmoke[(BOOTS_Y[currentMap] - 15) / BLOCK_SIZE + SMOKE_ADDITIONAL_SPACE / 2, (BOOTS_X[currentMap] - 15) / BLOCK_SIZE + SMOKE_ADDITIONAL_SPACE / 2] == 0)
            {
                g.FillRectangle(new SolidBrush(Color.FromArgb(200, 50, 50)), BOOTS_X[currentMap] - 1, BOOTS_Y[currentMap] + BLOCK_SIZE / 2, 14, BLOCK_SIZE / 2);
                g.FillRectangle(new SolidBrush(Color.FromArgb(200, 50, 50)), BOOTS_X[currentMap] + 15, BOOTS_Y[currentMap] + BLOCK_SIZE / 2, 14, BLOCK_SIZE / 2);
            }
            if (message)
            {
                /*g.TranslateTransform(1920, 1080);
                g.RotateTransform(180f);*/
                Rectangle messageRect = new Rectangle(760, 390, 400, 300);
                drawRectWithBorder(messageRect, Color.DodgerBlue, Color.Black, Color.FromArgb(17, 94, 174), 7, true, g);
                Rectangle acceptKeyRect = new Rectangle(910, 620, 100, 50);
                drawRectWithBorder(acceptKeyRect, Color.LightSlateGray, Color.DimGray, Color.Gray, 4, false, g);
                g.DrawString(messageStr, new Font("Comic San MS", 16, FontStyle.Regular), Brushes.Black, new Point(815, 460));
                g.DrawString("OK", new Font("Comic San MS", 25), Brushes.Black, new Point(928, 628));

                if (!initialSetting)
                {
                    g.DrawRectangle(new Pen(Color.Black, 2), new Rectangle(855, 415, 24, 24));
                    g.DrawRectangle(Pens.Black, new Rectangle(1025, 427, 120, 28));
                    g.DrawString("Туман", new Font("Verdana", 14), Brushes.Black, new Point(785, 415));
                    if (smokeEnabled)
                    {
                        g.DrawLine(new Pen(Color.Black, 4), 857, 427, 877, 427);
                        g.DrawLine(new Pen(Color.Black, 4), 867, 417, 867, 437);
                    }
                    g.DrawString("Сложность: ", new Font("Verdana", 14), Brushes.Black, new Point(1020, 405));
                    g.DrawString(gameDiffuculty == 1 ? "Нормально" : "Легко", new Font("Verdana", 14), gameDiffuculty == 1 ? Brushes.MediumAquamarine : Brushes.GreenYellow, new Point(1030 - (gameDiffuculty == 1 ? 2 : 0), 430));
                }
            }
            else 
                initialSetting = true;
            if (gameover)
            {
                Rectangle gameOverTable = new Rectangle(760, 390, 400, 300);
                drawRectWithBorder(gameOverTable, Color.LightSteelBlue, Color.DodgerBlue, Color.FromArgb(27, 114, 204), 8, false, g);
                g.DrawString("Игра окончена", new Font("Comic San MS", 30, FontStyle.Regular), Brushes.Black, new Point(815, 410));
                g.DrawString("   Для выхода нажми Esc \n\n                  или \n\n   жди окончания таймера: \n\n                 " + Math.Round(gameOverTimer / 30, 1), new Font("Comic San MS", 16, FontStyle.Regular), Brushes.Black, new Point(822, 490));
            }
            if (debugInfo)
            {
                /*g.TranslateTransform(1920, 1080);
                g.RotateTransform(180f);*/
                string text = "Key: " + haveKey.ToString() + "\nCan move: " + heroCanStepBack().ToString() + ";" + heroCanStepForward().ToString() + "\nFall speed; at earth?\n" + heroVelocity + ";" + heroAtEarth + "\nPosition: " + heroX + ";" + heroY + "\nJumps: " + heroJumping + ";" + heroJumps + ";";
                g.DrawString(text, new Font("Comic San MS", 15), is2D ? Brushes.Green : Brushes.Black, 1720, 0);
                g.DrawString(CalculateFrameRate().ToString(), new Font("Comic San MS", 15), Brushes.Black, 0, 0);
            }
        }
    }
}
